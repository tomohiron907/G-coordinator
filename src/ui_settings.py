# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gcode_modeling.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtPrintSupport import *
from pyqtgraph import opengl
from pyqtgraph.parametertree import ParameterTree
from text_editer import TextEditer
from terminal import TerminalWidget

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.resize(1400, 800)
        MainWindow.setObjectName("MainWindow")
        self.left_pane_setting(MainWindow)

        self.cetral_pane_setting(MainWindow)

        self.right_pane_setting(MainWindow)


        self.splitter = QSplitter()
        self.splitter.setOrientation(Qt.Horizontal)
        self.splitter.addWidget(QWidget())
        self.splitter.addWidget(QWidget())
        self.splitter.addWidget(QWidget())
        self.splitter.widget(0).setLayout(self.left_pane_layout)
        self.splitter.widget(1).setLayout(self.central_layout)
        self.splitter.widget(2).setLayout(self.right_layout)
        self.splitter.setSizes([100, 600, 220])

        self.main_layout = QVBoxLayout()
        self.main_layout.addWidget(self.splitter)
        central_widget = QWidget(MainWindow)
        central_widget.setLayout(self.main_layout)
        MainWindow.setCentralWidget(central_widget)
        
        MainWindow.setWindowTitle('Splitter with handle')
        self.retranslateUi(MainWindow)
        self.signal_connecter(MainWindow)

        
    
    def left_pane_setting(self,MainWindow):
        self.button_style_sheet = """
                                        QPushButton {
                                            background-color: #CCCCCC;
                                            color: #333333;
                                            border: none;
                                            padding: 10px 20px;
                                            border-radius: 10px;
                                        }
                                        QPushButton:hover {
                                            background-color: #AAAAAA;
                                        }
                                    """
        self.open_button = QtWidgets.QPushButton(MainWindow)
        self.open_button.setStyleSheet(self.button_style_sheet)
        self.open_button.setObjectName("open_button")
        self.save_button = QtWidgets.QPushButton(MainWindow)
        self.save_as_button = QtWidgets.QPushButton(MainWindow)

        self.save_as_button.setStyleSheet(self.button_style_sheet)
        self.save_button.setStyleSheet(self.button_style_sheet)
        self.button_horizontal_layout =  QtWidgets.QHBoxLayout()# ボタン用のレイアウト
        self.button_horizontal_layout.addWidget(self.open_button)
        self.button_horizontal_layout.addWidget(self.save_button)
        self.button_horizontal_layout.addWidget(self.save_as_button)

        self.editor = TextEditer(MainWindow)
        self.editor.setLineWrapMode(TextEditer.LineWrapMode.NoWrap)
        self.editor.textChanged.connect(self.__line_widget_line_count_changed)
        self.editor.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.editor.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)

        self.editor.setFont(QFont("Arial", 14))
        self.line_number_widget = LineNumberWidget(self.editor)
        self.line_number_widget.setFontSize(14)
        #self.line_number_widget.setFixedWidth(30)
        self.editor_layout = QtWidgets.QHBoxLayout()
        self.editor_layout.addWidget(self.line_number_widget)
        self.editor_layout.addWidget(self.editor)
        self.editor_layout.setSpacing(0)
        self.reload_button = QtWidgets.QPushButton(MainWindow)
        self.reload_button.setStyleSheet(self.button_style_sheet)
        
        self.editor_button_layout = QtWidgets.QVBoxLayout()
        self.editor_button_layout.addLayout(self.button_horizontal_layout)
        self.editor_button_layout.addLayout(self.editor_layout)
        self.editor_button_layout.addWidget(self.reload_button)
        #self.editor_button_layout.setSpacing(0)

        #self.message_console = QtWidgets.QTextEdit(MainWindow)
        self.terminal = TerminalWidget()
        self.message_console = self.terminal.text_edit
        self.terminal.setMinimumHeight(10)

        self.left_pane_widget = QWidget(MainWindow)
        self.message_splitter = QSplitter()
        self.message_splitter.setOrientation(Qt.Vertical)#splitterの方向を横に設定
        self.message_splitter.addWidget(QWidget())
        self.message_splitter.widget(0).setLayout(self.editor_button_layout)
        self.message_splitter.addWidget(self.terminal)
        self.message_splitter.setSizes([10,1])
        
        self.left_pane_layout = QVBoxLayout()
        self.left_pane_layout.addWidget(self.message_splitter)

    def cetral_pane_setting(self, MainWindow):
        self.graphicsView = opengl.GLViewWidget(MainWindow)
        self.segment_button_layout = QtWidgets.QHBoxLayout()
        self.slider_segment =  QtWidgets.QSlider(MainWindow)
        self.slider_segment.setOrientation(QtCore.Qt.Horizontal)
        self.left_button = QtWidgets.QToolButton(MainWindow)
        self.right_button = QtWidgets.QToolButton(MainWindow)
        self.segment_button_layout.addWidget(self.slider_segment)
        self.segment_button_layout.addWidget(self.left_button)
        self.segment_button_layout.addWidget(self.right_button)

        self.graphic_seg_layout =  QtWidgets.QVBoxLayout()
        self.graphic_seg_layout.addWidget(self.graphicsView)
        self.graphic_seg_layout.addLayout(self.segment_button_layout)


        self.layer_button_layout = QtWidgets.QVBoxLayout()
        self.slider_layer =  QtWidgets.QSlider(MainWindow)
        self.slider_layer.setOrientation(QtCore.Qt.Vertical)
        self.up_button = QtWidgets.QToolButton(MainWindow)
        self.down_button = QtWidgets.QToolButton(MainWindow)
        self.layer_button_layout.addWidget(self.slider_layer)
        self.layer_button_layout.addWidget(self.up_button)
        self.layer_button_layout.addWidget(self.down_button)

        self.central_layout =  QtWidgets.QHBoxLayout()
        self.central_layout.addLayout(self.graphic_seg_layout)
        self.central_layout.addLayout(self.layer_button_layout)

    def right_pane_setting(self, MainWindow):
        self.machine_settings_button = QtWidgets.QPushButton(MainWindow)
        self.parameter_tree = ParameterTree(MainWindow)
        self.gcode_export_button = QtWidgets.QPushButton(MainWindow)
        self.gcode_export_button.setStyleSheet(self.button_style_sheet)
        self.right_layout = QtWidgets.QVBoxLayout()
        self.right_layout.addWidget(self.machine_settings_button)
        self.right_layout.addWidget(self.parameter_tree)
        self.right_layout.addWidget(self.gcode_export_button)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.open_button.setText(_translate("MainWindow", "       Open File       "))
        self.save_button.setText(_translate("MainWindow", "Save"))
        self.save_as_button.setText(_translate("MainWindow", "Save As"))
        self.reload_button.setText(_translate("MainWindow", "reload"))
        self.left_button.setText(_translate("MainWindow", "..."))
        self.right_button.setText(_translate("MainWindow", "..."))
        self.up_button.setText(_translate("MainWindow", "..."))
        self.down_button.setText(_translate("MainWindow", "..."))
        self.gcode_export_button.setText(_translate("MainWindow", "Gcode Export"))
        self.machine_settings_button.setText(_translate("MainWindow", "Machine settings"))
    
    def signal_connecter(self, MainWindow):
        self.open_button.pressed.connect(MainWindow.file_open) # type: ignore
        self.save_button.pressed.connect(MainWindow.file_save) # type: ignore
        self.save_as_button.pressed.connect(MainWindow.file_save_as) # type: ignore
        self.reload_button.pressed.connect(MainWindow.save_as_modeling) # type: ignore
        self.reload_button.pressed.connect(MainWindow.draw_updated_object) # type: ignore
        self.machine_settings_button.pressed.connect(MainWindow.open_machine_settings_window) # type: ignore
     
        self.gcode_export_button.pressed.connect(MainWindow.draw_updated_object) # type: ignore
        self.gcode_export_button.pressed.connect(MainWindow.Gcode_create) # type: ignore
        self.slider_layer.valueChanged['int'].connect(MainWindow.redraw_layer_object) # type: ignore
        self.up_button.pressed.connect(MainWindow.up_button_pressed) # type: ignore
        self.down_button.pressed.connect(MainWindow.down_button_pressed) # type: ignore
        self.slider_segment.valueChanged['int'].connect(MainWindow.redraw_segment_object) # type: ignore
        self.left_button.pressed.connect(MainWindow.left_button_pressed) # type: ignore
        self.right_button.pressed.connect(MainWindow.right_button_pressed) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def __line_widget_line_count_changed(self):
        if self.line_number_widget:
            n = int(self.editor.document().lineCount())
            self.line_number_widget.changeLineCount(n)
        


class LineNumberWidget(QTextBrowser):
    def __init__(self, widget: QPlainTextEdit):
        super().__init__()
        self.widget = widget
        self.lineCount = widget.document().blockCount()
        self.fontSize = int(widget.font().pointSizeF())
        self.styleInit()
        self.resize(40, widget.height())
        self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.setTextInteractionFlags(Qt.NoTextInteraction)
        self.verticalScrollBar().setEnabled(False)
        self.widget.verticalScrollBar().valueChanged.connect(self.__changeLineWidgetScrollAsTargetedWidgetScrollChanged)
        self.widget.installEventFilter(self)
        self.initLineCount()

    def __changeLineWidgetScrollAsTargetedWidgetScrollChanged(self, v):
        self.verticalScrollBar().setValue(v)

    def eventFilter(self, obj, event):
        if event.type() == QEvent.Resize:
            self.resize(40, obj.height())
            return True
        return False

    def initLineCount(self):
        for n in range(1, self.lineCount+1):
            self.append(str(n))
    def changeLineCount(self, n):
        max_one = max(self.lineCount, n)
        diff = n - self.lineCount
        if max_one == self.lineCount:
            first_v = self.verticalScrollBar().value()
            for i in range(self.lineCount, self.lineCount + diff, -1):
                self.moveCursor(QTextCursor.End, QTextCursor.MoveAnchor)
                self.moveCursor(QTextCursor.StartOfBlock, QTextCursor.MoveAnchor)
                self.moveCursor(QTextCursor.End, QTextCursor.KeepAnchor)
                self.textCursor().removeSelectedText()
                self.textCursor().deletePreviousChar()
            last_v = self.verticalScrollBar().value()
            if abs(first_v-last_v) != 2:
                self.verticalScrollBar().setValue(first_v)
        else:
            for i in range(self.lineCount, self.lineCount + diff):
                self.append(str(i + 1))

        self.lineCount = n
        self.styleInit()

    def setValue(self, v):
        self.verticalScrollBar().setValue(v)

    def setFontSize(self, s: float):
        self.fontSize = int(s)
        self.styleInit()

    def styleInit(self):
        style = f'''
            QTextBrowser {{
                background: #2b2b2b;
                border: none;
                color: #AAA;
                font: {self.fontSize}pt;
            }}
        '''
        self.setStyleSheet(style)
        if self.lineCount<99:
            self.setFixedWidth(self.fontSize * 2)
        else:
            self.setFixedWidth(self.fontSize * 3)


    def updateLineCount(self):
        new_line_count = self.widget.document().blockCount()
        if new_line_count != self.lineCount:
            self.changeLineCount(new_line_count)
